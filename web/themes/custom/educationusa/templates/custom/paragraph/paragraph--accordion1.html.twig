{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished'
  ]
%}
{% block paragraph %}
  <div{{ attributes.addClass(classes) }}>
    {% block content %}




<div class="col-sm-12">
						<div class="accordion border-0 mt-2 pb-4" id="accordionExample">
							<div class="accordion-item  border-0">
								<p class="accordion-header " id="headingOne">
                            {# {% for item in content.field_selector["#items"] %} #}
                            {% for i in content.field_accordion_title['#items']|keys %}
									<button class="accordion-button fw-bold collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="false" aria-controls="collapseOne">
										<span class=" fw-bold accordion-title ">1<span class="ms-4 ">
												{{ content.field_accordion_title.[i] }}</span>
										</span>
									</button>
								</p>
								{# <div id="collapseOne" class="accordion-collapse collapse" aria-labelledby="headingOne" data-bs-parent="#accordionExample" style="">
									<div class="accordion-body">
										{{ content.field_accordion_answer.[i]}}
									</div>
								</div> #}
                                {% endfor %}
							</div>
						</div>
					</div>
 {% endblock %}
  </div>
{% endblock paragraph %}

{#

      {% for i in content.field_el_and_app_title['#items']|keys %}
        <div class="eca_ex-programs-el-app-container-title">
        {{ content.field_el_and_app_title[i]  }}
        </div>
      {% endfor %}

      <div class="eca_ex-programs-el-app-container-descriptions w-row container-fluid">
      <div class="row">
      <div class="col-xs-12 col-sm-6">
        {% for i in content.field_el_and_app_descriptions['#items']|keys|slice(0, 3) %}
          <div class="field__item">
            {{ content.field_el_and_app_descriptions[i] }}
          </div>
        {% endfor %}
      </div>

          <div class="col-xs-12 col-sm-6">
        {% for i in content.field_el_and_app_descriptions['#items']|keys|slice(4, 12) %}
          <div class="field__item">
            {{ content.field_el_and_app_descriptions[i] }}
          </div>
        {% endfor %}
      </div>

      </div>
      </div>

 {% endblock %}
  </div>
{% endblock paragraph %}




{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{# {%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
  ]
%}
{% block paragraph %}
  <div{{ attributes.addClass(classes) }}>
    {% block content %}

<div class="col-sm-12">
						<div class="accordion border-0 mt-2 pb-4" id="accordionExample">
							<div class="accordion-item  border-0">
								<p class="accordion-header " id="headingOne">
                            {# {% for item in content.field_selector["#items"] %} #}
									{# <button class="accordion-button fw-bold collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="false" aria-controls="collapseOne">
										<span class=" fw-bold accordion-title ">1<span class="ms-4 ">
												{{ item.entity.field_accordion_title.0.value }}</span>
										</span>
									</button>
								</p>
								<div id="collapseOne" class="accordion-collapse collapse" aria-labelledby="headingOne" data-bs-parent="#accordionExample" style="">
									<div class="accordion-body">
										{{ item.entity.field_accordion_answer.0.value|raw }}
									</div>
								</div> #}
                                {# {% endfor %} #}
							{# </div>
						</div>
					</div> #}
                    {# {{row.content['#row']._entity.field_question_answer[0].value|raw}} #}
                    {# {{item.content['#paragraph'].field_question_answer.value}} #}
                    {# {{ content.field_question_answer.0}} #}
                    {# {% endfor %} #}
				{# </div> #}


          {# <img class="card-img-top img-fluid rounded-4" src="{{file_url(content.field_getting_there_image|field_target_entity.uri.value)}}" alt="{{content.field_getting_there_image|field_raw('alt')}}"  />

   <p class="h3 fw-bold mt-3">
        {{ content.field_getting_there_title.0 }}
      </p>

      <p class="pb-2">
        {{ content.field_getting_there_body.0 }}
      </p>
    {% if content.field_getting_there_link[0]['#url'] is not empty %}
        <a href="{{ content.field_getting_there_link[0]['#url'] }}" class="fw-bold pt-2" style="cursor: pointer;">{{ content.field_getting_there_link[0]['#title'] }} <i class="fa fa-angle-right link-primary ml-3"></i></a>
    {% endif %} #}

    {# {% endblock %}
  </div>
{% endblock paragraph %} #}




{# {% for item in content.field_selector["#items"] %}
     {% set image = item.entity.field_media_image.entity.field_media_image %}

     {% if image.entity.uri.value != "" %}
       <img src="{{ file_url(image.entity.uri.value) }}" alt="={{ image.alt }}" />
     {% else %}
       <img src="/assets/images/hero-inner.jpg" alt="Students listening intently" />
     {% endif %}

     {{ item.entity.field_caption_title.0.value }}
     {{ item.entity.field_caption_text.0.value|raw }}
 {% endfor %} #}